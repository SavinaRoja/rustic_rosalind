use std::fs;

pub fn file_parse(input_filename: &str) -> String {
    let contents = fs::read_to_string(input_filename).unwrap();
    return contents
}

pub fn rna(input: &String) -> String {
    let translated: String = input.chars().map(|x| {
        match x {
            'T' => {'U'},
            _ => {x}
        }
    }).collect();
    return translated
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn rna_empty() {
        assert_eq!(rna(&String::new()), String::new());
    }

    #[test]
    fn rna_no_action() {
        let input = String::from("ACGACG");
        assert_eq!(rna(&input), input);
    }

    #[test]
    fn rna_minimal_action() {
        assert_eq!(rna(&String::from("T")), String::from("U"))
    }

    #[test]
    fn rna_simple() {
        let input = String::from("ACGTACGT");
        assert_eq!(rna(&input), String::from("ACGUACGU"));
    }

    #[test]
    fn rna_with_a_full_dataset() {
        let input = String::from("\
AAGCCCCCTCATCGATAGCAGCCGTACCCCTGGCGGCCGACGAATGTGGGCTAACTTTGACTACGCGTCGTCACCGGCT\
GAAAAGTGCACATTAGGTCAGTTGGTTCAAGCAGGCCGAGACACTCGGCTATCAGACAAAGTTACTCCGTCGCACCGCC\
GCGGGTGATAATAGCCAAGAAAGTTCAAGTTGCTCGAAGTCTCTCCAAGCCGTAGTACAGTTTGCTTCCCGCCTGCAGG\
CCTGCTGTATGCTTACAAGATGGGCCACGTGTAAAGGATGGATTTCCAAAAAGAAACACCCTAGGTGTACATTAAGATC\
TTTACGCCGCGAGGGCATCAACGATTATAGGAAATTCAGAATCGGCAGTCATTCTGACTCCGTCATCGGCCCTCTTGAT\
CTCTATTCTGGACAGCTTCTACGTACTTAAAAGGTCTCGCACGCCACTACGTAATCTCGGCTCAGGAAGGCGCATGTGG\
GAGAGCCTATCGCTAGAGGCGCATGTCTTCGCTAGCACTCAAATTAGACAGGATTATTTTTAGTTGCGCGTGACTCTGC\
TTGGCCTCACACAAGGTTCCCACCTCATGGTTAAAGTATTATGCCCTCAGCCAATGATGCCCCGAAAGATTCACCTCCA\
TGATCGGTAACTTGCACCCTTCAGCCCCCTTATAAACAGCAGCAATACTAGGATATACGTTCTTCGTATTCAATCATCC\
TATCATCTAATCCATTAGGCTTTCCGCTCTGTTTACCATCATACCCACAGAGGCCAGCAGCCCTTCTGCTTACGAAGCC\
CTGTAACCAAAGTAGTGGGGTTGCCGTTTTTCATCCGAGATGAACGCCAGACCCCGCGCACTTCGCCCGGTTGCGTTCC\
AATTACAGTCATCTTGTGATAAGTCCGGGGTACAGGGCACCGGTGCTCCGAGG");
        let result =String::from("\
AAGCCCCCUCAUCGAUAGCAGCCGUACCCCUGGCGGCCGACGAAUGUGGGCUAACUUUGACUACGCGUCGUCACCGGCU\
GAAAAGUGCACAUUAGGUCAGUUGGUUCAAGCAGGCCGAGACACUCGGCUAUCAGACAAAGUUACUCCGUCGCACCGCC\
GCGGGUGAUAAUAGCCAAGAAAGUUCAAGUUGCUCGAAGUCUCUCCAAGCCGUAGUACAGUUUGCUUCCCGCCUGCAGG\
CCUGCUGUAUGCUUACAAGAUGGGCCACGUGUAAAGGAUGGAUUUCCAAAAAGAAACACCCUAGGUGUACAUUAAGAUC\
UUUACGCCGCGAGGGCAUCAACGAUUAUAGGAAAUUCAGAAUCGGCAGUCAUUCUGACUCCGUCAUCGGCCCUCUUGAU\
CUCUAUUCUGGACAGCUUCUACGUACUUAAAAGGUCUCGCACGCCACUACGUAAUCUCGGCUCAGGAAGGCGCAUGUGG\
GAGAGCCUAUCGCUAGAGGCGCAUGUCUUCGCUAGCACUCAAAUUAGACAGGAUUAUUUUUAGUUGCGCGUGACUCUGC\
UUGGCCUCACACAAGGUUCCCACCUCAUGGUUAAAGUAUUAUGCCCUCAGCCAAUGAUGCCCCGAAAGAUUCACCUCCA\
UGAUCGGUAACUUGCACCCUUCAGCCCCCUUAUAAACAGCAGCAAUACUAGGAUAUACGUUCUUCGUAUUCAAUCAUCC\
UAUCAUCUAAUCCAUUAGGCUUUCCGCUCUGUUUACCAUCAUACCCACAGAGGCCAGCAGCCCUUCUGCUUACGAAGCC\
CUGUAACCAAAGUAGUGGGGUUGCCGUUUUUCAUCCGAGAUGAACGCCAGACCCCGCGCACUUCGCCCGGUUGCGUUCC\
AAUUACAGUCAUCUUGUGAUAAGUCCGGGGUACAGGGCACCGGUGCUCCGAGG");
        assert_eq!(rna(&input), result);
    }
}